package model;

import javax.persistence.*;
import java.util.Objects;

/**
 * The BaseEntity superclass. Provides a primary key (autogenerated id),
 * a UUID (used for equality and hashing) and an update abstract method
 */
@MappedSuperclass
public abstract class BaseEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true)
    private String uuid;

    protected BaseEntity() { }

    public abstract void copy(BaseEntity a);

    public BaseEntity(String uuid) {
        if (uuid == null)
            throw new IllegalArgumentException( "UUID cannot be null!" );
        this.uuid = uuid;
    }

    public Long getId() {
        return id;
    }

    public String getUuid() {
        return uuid;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        BaseEntity that = (BaseEntity) o;
        return uuid.equals(that.uuid);
    }

    @Override
    public int hashCode() {
        return Objects.hash(uuid);
    }
}